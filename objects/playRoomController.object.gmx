<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(global.playerClass)
{
    case 0: instance_create(playerX,playerY,archerObj); break;
    case 1: instance_create(playerX,playerY,mageObj); break;
    case 2: instance_create(playerX,playerY,builderObj); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeLeft = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if timeLeft &lt; 1
{
    waveCountdown = false;
    alarm[4] = 2;
}
else
{
    waveCountdown = true;
    timeLeft -= 1;
    alarm[3] = room_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveCompleate = false;
alarm[0] = room_speed * waveTimeout;
timeLeft = waveTimeout;
alarm[3] = room_speed;
waveCountdown = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if waveGoblins &gt; 0
{
    randomX = round(random(view_wview));
        if randomX &lt; spawnBorder
        {
            randomX = spawnBorder;
        }
            if randomX &gt; view_wview - spawnBorder
            {
                randomX = view_wview - spawnBorder
            }
            
    if waveGoblins = initGoblins
    {
        wavePhase = 1;
    }
        if waveGoblins = initGoblins / 2
        {
            wavePahse = 2;
        }
            if waveGoblins = initGoblins / 3
            {
                wavePhase = 3;
            }
       
    switch(wavePhase)
    {
        /*
        goblinSpawn - скрипт создания гоблинов
        85 - шанс создания common
        14 - шанс создания uncommon
        0 - шанс создания rare
        1 - шанс создания unique
        */
        case 1: goblinSpawn(85,14,0,1); break;
        case 2:
                if waveNumber &gt;= 6 
                {
                    goblinSpawn(65,24,10,1);
                }
                else
                {
                    goblinSpawn(64,35,0,1);
                }
                
                break;
        case 3: 
                if waveNumber &gt;= 6
                {
                    if waveNumber &lt; 8
                    {
                        goblinSpawn(65,24,10,1);
                    }
                        if waveNumber &gt;= 8 &amp;&amp; waveNumber &lt;= 11
                        {
                            goblinSpawn(50,35,13,2);
                        }
                            if waveNumber &gt; 11
                            {
                                goblinSpawn(44,30,18,8);
                            }
                }
                else
                {
                    goblinSpawn(64,35,0,1);
                }
                
                break;
    }
}
else
{
    searchLastObject("enemy");
    
    if waveGoblins - G2 = waveGoblins
    {
        alarm[2] = room_speed * 2;
        waveCompleate = true;   
        global.playScore += round((30 * sqrt(waveNumber)));     
    }
    else
    {
        alarm[1] = room_speed / 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if waveGoblins = 0
{
    waveNumber += 1;
    waveGoblins = 2 + round((waveNumber + 3) * sqrt(waveNumber));
    initGoblins = waveGoblins;
    wavePhase = 1;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if timeLeft &lt; 1
{
    waveCountdown = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lastScore = global.playScore;

if global.playScore &gt; global.topScore
{
    ini_open("glRes.ini")
    {
        ini_write_real("Res","topScore",global.playScore);   
    }
    ini_close();
    
    global.topScore = global.playScore;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = "controller";

randomize();

//для игрока
playerX = view_wview / 2;
playerY = view_hview - 220;

switch(global.playerClass)
{
    case 0: instance_create(playerX,playerY,archerObj); break;
    case 1: instance_create(playerX,playerY,mageObj); break;
    case 2: instance_create(playerX,playerY,builderObj); break;
}


instance_create(56,56,pauseObj);

//для гоблинов
waveNumber = 0;
waveGoblins = 0;
wavePhase = 0;
waveTimeout = 10;
timeLeft = waveTimeout;
miniWaveTimeout = 1.25;

waveCompleate = false;
waveCountdown = false;

spawnBorder = 240;
maxGoblinsPerSecond = 8;
countRandom = 2 + round(random(3));

G2 = waveGoblins;
initGoblins = waveGoblins;

ini_open("glRes.ini")
{
    global.comSPD = ini_read_real("Goblins","comSPD",1);
    global.comHP = ini_read_real("Goblins","comHP",1);
    global.uncomSPD = ini_read_real("Goblins","uncomSPD",1);
    global.uncomHP = ini_read_real("Goblins","uncomHP",1);
    global.rareSPD = ini_read_real("Goblins","rareSPD",1);
    global.rareHP = ini_read_real("Goblins","rareHP",1);
    global.uniqueSPD = ini_read_real("Goblins","uniqueSPD",1);
    global.uniqueHP = ini_read_real("Goblins","uniqueHP",1);
}
ini_close();

/*
Структура таймеров волн
alarm[0] - начало волны
alarm[1] - спавн мобов внутри волны
alarm[2] - выключает надпись wave compleate
alarm[3] - менеджер обратного отсчета
*/
alarm[0] = room_speed * waveTimeout / 3;

global.playScore = 0;
global.playLives = global.lives;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if timeLeft = 0 
{
    draw_sprite(attackBeginSpr,0, txtX / 2, 60);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if waveCompleate = true
{
    switch(global.lang)
    {
        case "ru": draw_sprite(waveDestroySpr,1, txtX / 2, 60); break;
        case "en": draw_sprite(waveDestroySpr,0, txtX / 2, 60); break;
    }
    //drawText(CambriaBold40,c_white,fa_center,fa_center,txtX / 2,txtY / 2 - 70,"wave compleate");
}

draw_sprite(pauseSpr,0,pauseObj.x,pauseObj.y);
draw_sprite(scoreSpr,0,txtX - 218,40);
drawString(CambriaBold36,c_white,fa_left,fa_center,txtX - 190,40,global.playScore);

switch(global.playLives)
{
    case 0:
            draw_sprite(liveSpr,1,txtX - 38,90);
            draw_sprite(liveSpr,1,txtX - 98,90);
            draw_sprite(liveSpr,1,txtX - 158,90);
            draw_sprite(liveSpr,1,txtX - 218,90);
            break;
    case 1:
            draw_sprite(liveSpr,0,txtX - 38,90);
            draw_sprite(liveSpr,1,txtX - 98,90);
            draw_sprite(liveSpr,1,txtX - 158,90);
            draw_sprite(liveSpr,1,txtX - 218,90);
            break;
    case 2:
            draw_sprite(liveSpr,0,txtX - 38,90);
            draw_sprite(liveSpr,0,txtX - 98,90);
            draw_sprite(liveSpr,1,txtX - 158,90);
            draw_sprite(liveSpr,1,txtX - 218,90);
            break;
    case 3:
            draw_sprite(liveSpr,0,txtX - 38,90);
            draw_sprite(liveSpr,0,txtX - 98,90);
            draw_sprite(liveSpr,0,txtX - 158,90);
            draw_sprite(liveSpr,1,txtX - 218,90);
            break;
    case 4: 
            draw_sprite(liveSpr,0,txtX - 38,90);
            draw_sprite(liveSpr,0,txtX - 98,90);
            draw_sprite(liveSpr,0,txtX - 158,90);
            draw_sprite(liveSpr,0,txtX - 218,90);
            break;
}

if waveCountdown = true
{
    draw_sprite(numberSpr,timeLeft - 1, txtX / 2, 60);
}
else
{
    if waveCompleate = false
    {
        drawText(CambriaBold36,c_white,fa_left,fa_center,txtX - 240, 140,"wave");
        
            if waveNumber &lt; 1
            {
                drawString(CambriaBold36,c_white,fa_left,fa_center,txtX - 80, 140,1);
            }
            else
            {
                drawString(CambriaBold36,c_white,fa_left,fa_center,txtX - 80, 140,waveNumber);
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
