<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(global.playerClass)
{
    case 0: instance_create(playerX,playerY,archerObj); break;
    case 1: instance_create(playerX,playerY,mageObj); break;
    case 2: instance_create(playerX,playerY,builderObj); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveCompleate = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if waveGoblins &gt; 0
{
    randomX = round(random(view_wview));
        if randomX &lt; spawnBorder
        {
            randomX = spawnBorder;
        }
        if randomX &gt; view_wview - spawnBorder
        {
            randomX = view_wview - spawnBorder
        }
        
        if countRandom &gt; 0
        {
            goblin = instance_create(randomX,-32,comGoblinObj);
            waveGoblins -= 1;
            countRandom -= 1;
            alarm[1] = room_speed / maxGoblinsPerSecond;    
        }
        else
        {
            countRandom = 2 + round(random(3));
            alarm[1] = room_speed * miniWaveTimeout;
        }
}
else
{
    searchLastObject("enemy");
    if waveGoblins - G2 = waveGoblins
    {
        alarm[0] = room_speed * waveTimeout;
        alarm[2] = room_speed * waveTimeout / 2;
        waveCompleate = true;        
    }
    else
    {
        alarm[1] = room_speed / 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if waveGoblins = 0
{
    waveNumber += 1;
    waveGoblins = 2 + round((waveNumber + 3) * sqrt(waveNumber));
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = "controller";

//для игрока
playerX = view_wview / 2;
playerY = view_hview - 220;

switch(global.playerClass)
{
    case 0: instance_create(playerX,playerY,archerObj); break;
    case 1: instance_create(playerX,playerY,mageObj); break;
    case 2: instance_create(playerX,playerY,builderObj); break;
}

//для гоблинов
waveNumber = 0;
waveGoblins = 0;
waveTimeout = 15;
miniWaveTimeout = 2.5;

waveCompleate = false;
spawnBorder = 240;
maxGoblinsPerSecond = 3;
countRandom = 2 + round(random(3));

G2 = waveGoblins;

/*
Структура таймеров волн
alarm[0] - начало волны
alarm[1] - спавн мобов внутри волны
alarm[2] - выключает надпись wave compleate
*/
alarm[0] = room_speed * waveTimeout / 3;

/*
//стены
wallX = view_wview;
wallY = view_hview;
//#1 wall
wall1 = instance_create(wallX - wallX + 90,wallY - 5,wallLeftObj);
wall2 = instance_create(wall1.x + 65,wall1.y,wallMiddleObj);
wall3 = instance_create(wall2.x + 65,wall1.y,wallMiddleObj);
wall4 = instance_create(wall3.x + 65,wall1.y,wallMiddleObj);
wall5 = instance_create(wall4.x + 65,wall1.y,wallMiddleObj);
wall6 = instance_create(wall5.x + 65,wall1.y,wallMiddleObj);
wall7 = instance_create(wall6.x + 65,wall1.y,wallMiddleObj);
wall8 = instance_create(wall7.x + 65,wall1.y,wallMiddleObj);
wall9 = instance_create(wall8.x + 65,wall1.y,wallMiddleObj);
wall10 = instance_create(wall9.x + 65,wall1.y,wallMiddleObj);
wall11 = instance_create(wall10.x + 65,wall1.y,wallMiddleObj);
wall12 = instance_create(wall11.x + 65,wall1.y,wallMiddleObj);
//wall13 = instance_create(wall12.x + 65,wall1.y,wallMiddleObj);
wall14 = instance_create(wallX - 90,wall1.y,wallRightObj);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if waveCompleate = true
{
    drawText(CambriaBold40,c_white,fa_center,fa_bottom,view_wview / 2,view_hview /2,"wave compleate");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
